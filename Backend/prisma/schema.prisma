generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Speedy2022@34.159.149.229:5432/wahlsystem"
}

model election {
  election_id    Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String?
  form_schema    Json             @db.Json
  created_by     Int?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  start_date     DateTime?        @db.Timestamp(6)
  end_date       DateTime?        @db.Timestamp(6)
  blockchain_id  String?
  users          users?           @relation(fields: [created_by], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  election_users election_users[]
}

model users {
  user_id        Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  password_hash  String           @db.VarChar(255)
  mrz_data       Json             @db.Json
  is_verified    Boolean?         @default(false)
  registered_at  DateTime?        @default(now()) @db.Timestamp(6)
  election       election[]
  election_users election_users[]
  wallets        wallets[]
}

model election_users {
  id          Int      @id @default(autoincrement())
  election_id Int
  user_id     Int
  election    election @relation(fields: [election_id], references: [election_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_election")
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([election_id, user_id], map: "unique_election_user")
  @@index([election_id], map: "idx_election_users_election_id")
  @@index([user_id], map: "idx_election_users_user_id")
}

model wallets {
  wallet_id             Int       @id @default(autoincrement())
  user_id               Int
  wallet_address        String    @unique(map: "idx_wallet_address") @db.VarChar(255)
  encrypted_private_key String
  created_at            DateTime? @default(now()) @db.Timestamp(6)
  iv                    String?   @db.VarChar(32)
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_wallets")

  @@index([user_id], map: "idx_user_id")
}
